 #X text 202 3 MAKING A SINE WAVE; #X text 32 195 Audio computation can be turned on and off by sending #X text 113 276 ON; #X text 222 276 OFF; #X text 29 297 You should see the Pd window change to reflect whether #X text 30 368 When DSP is on \, you should hear a tone whose pitch #X text 28 434 In general when you start a work session with Pd \, #X text 296 247 <-- click these; #X text 187 139 <-- reduce amplitude to 0.05; #X text 160 168 <----- send to the audio output device; #X text 32 23 Audio computation in Pd is done using "tilde objects" #X text 342 490 updated for Pd version 0.36; #X text 342 490 updated for Pd version 0.36; #X text 456 45 ON; #X text 534 43 OFF; #X text 164 18 CONTROLLING AMPLITUDE; #X text 35 327 Amplitudes of audio signals can have any reasonable #X text 141 100 <-- set amplitude here in dB; #X text 211 133 <-- this converts dB to linear units; #X text 210 164 <-- this shows the linear gain; #X text 116 204 <-- multiply the sine wave by the gain \, reducing #X text 35 396 Here we calculate a gain for the multiplier (*~) using #X text 34 452 Pd assumes you have a two channel audio system unless #X text 440 486 updated for Pd version 0.33; #X text 114 282 <-- and out. We're sending to both channels now.; #X text 114 282 <-- and out. We're sending to both channels now.; #X text 467 112 ON; #X text 555 112 OFF; #X text 129 243 <--- ramp generator; #X text 132 78 <-- sine wave; #X text 274 124 ON; #X text 154 105 <-- slow; #X text 144 126 <-- fast; #X text 111 146 <-- instantly; #X text 271 197 OFF; #X text 136 178 <-- slow; #X text 129 199 <-- fast; #X text 109 219 <-- instantly; #X text 112 161 ----------------------; #X text 97 308 <-- out; #X text 103 7 CONTROLLING AMPLITUDE USING LINE~; #X text 38 342 Line~'s left inlet is a target value \; it reaches that #X text 34 495 The line~ object (and its control brother \, line) treat #X text 14 27 In this patch \, the multiplier is configured to multiply #X text 37 395 (In this example \, message boxes with two numbers each #X text 386 557 updated for Pd version 0.36; #X text 93 268 <-- multiply the sine wave by the ramp. There's no longer #X text 93 268 <-- multiply the sine wave by the ramp. There's no longer #X text 124 9 LINES GRAPHED; #X text 24 33 Here again is a line~ controlling the amplitude of an #X text 70 379 ramp up; #X text 235 378 ramp down; #X text 406 376 to 1/2; #X text 634 491 ------ 1 second ------; #X text 38 485 Click the message boxes above to try it. Note that in #X text 662 727 updated for Pd version 0.33; #X text 41 600 On most machines \, you will hear an interruption in #X text 41 600 On most machines \, you will hear an interruption in #X text 41 600 On most machines \, you will hear an interruption in #X text 108 177 <-- this is a subwindow--right click on it; #X text 149 197 and select "open" to see inside.; #X text 30 401 The output control automatically starts DSP whenever #X text 383 463 updated for Pd version 0.36; #X text 143 115 <-- Here we make an A major triad as a test signal. #X text 31 250 In this and subsequent patches \, we'll use a subwindow #X text 31 250 In this and subsequent patches \, we'll use a subwindow #X text 105 66 <-- set frequency; #X text 372 65 <-- set MIDI pitch; #X text 15 429 Frequency and pitch are converted using the "ftom" and #X text 476 308 ---- 0.1 seconds ----; #X text 447 6 FREQUENCY AND PITCH; #X text 16 363 The osc~ object \, if you give it an argument \, expects #X text 14 496 mtof and ftom work fine for microtones (non-integral #X text 15 553 Note also the "set" messages going to the number boxes #X text 87 291 <-- output level; #X text 51 116 <-- convert frequency; #X text 106 134 to "MIDI" pitch; #X text 327 117 <-- convert "MIDI" pitch to frequency; #X text 437 619 updated for Pd version 0.36; #X text 437 619 updated for Pd version 0.36; #X text 68 34 <-- reset to middle C; #X text 133 7 Adding sinusoids to make a complex tone; #X text 165 294 <-- click to graph; #X text 260 129 frequencies of harmonics; #X text 260 155 four oscillators; #X text 264 181 adjust amplitudes; #X text 109 233 add the three overtones together; #X text 381 632 updated for Pd version 0.40.; #X text 429 360 ---- 0.02 seconds ----; #X text 129 259 <-- overtones ON/OFF; #X text 29 580 To hear the output \, choose a pitch (at top) \, optionally #X text 31 392 A simple way to build non-sinusoidal \, periodic musical #X text 31 392 A simple way to build non-sinusoidal \, periodic musical #X text 133 7 Beating between closely tuned sinusoids; #X text 33 280 In each of the three pairs of oscillators above \, the #X text 31 407 They are all summed using "+~" boxes. They could have #X text 30 474 In contrast to the previous example \, the oscillators #X text 30 474 In contrast to the previous example \, the oscillators #X text 166 75 carrier; #X text 165 93 frequency; #X text 244 59 frequency; #X text 245 42 modulation; #X text 33 8 FREQUENCY MODULATION ("FM") USING TWO OSCILLATORS; #X text 52 214 "carrier"; #X text 34 232 oscillator -->; #X text 47 149 add modulator; #X text 46 167 to carrier; #X text 44 186 frequency -->; #X text 320 150 index; #X text 322 131 modulation; #X text 531 172 --- 0.01 seconds ----; #X text 53 443 To get the FM sound \, set all three of carrier frequency #X text 489 613 updated for Pd version 0.37; #X text 54 332 This patch shows the classical FM synthesis technique #X text 55 526 The component frequencies are equal to the carrier frequency #X text 55 526 The component frequencies are equal to the carrier frequency #X text 27 34 So far we've seen these audio ("tilde") objects:; #X text 124 86 -- ramp generator; #X text 158 113 -- sampler (which we've only used for graphing so far) #X text 113 165 -- audio output ("digital/analog converter" -- a misnomer) #X text 34 193 ... and these "control" objects:; #X text 162 243 -- frequency to pitch conversion; #X text 184 270 -- input and output to a subpatch; #X text 108 296 ("send") -- wireless message sending; #X text 109 321 ("receive") ... and receiving; #X text 107 60 (etc.) -- arithmetic on audio signals; #X text 109 218 (etc.) -- arithmetic; #X text 385 426 updated for Pd version 0.40.; #X text 112 139 -- sinusoidal oscillator; #X text 97 416 -- toggle switch; #X text 109 394 -- number box; #X text 111 372 -- message box; #X text 43 346 ... and these other (non-object) boxes:; #X text 43 346 ... and these other (non-object) boxes:; #X text 456 587 updated for Pd version 0.34; #X text 33 8 WAVETABLE OSCILLATORS; #X text 36 106 wavetable; #X text 94 42 pitch->; #X text 35 309 Note that I selected "save contents" in the properties #X text 597 217 CLEAR TABLE; #X text 35 395 For efficiency's sake tabosc4~ requires that the table #X text 38 494 If you want a specific sinusoidal composition \, you #X text 36 240 Here \, in place of the "osc~" cosine wave oscillator #X text 36 240 Here \, in place of the "osc~" cosine wave oscillator #X text 36 240 Here \, in place of the "osc~" cosine wave oscillator #X text 36 240 Here \, in place of the "osc~" cosine wave oscillator #X text 456 587 updated for Pd version 0.34; #X text 33 8 WAVETABLE OSCILLATORS; #X text 36 106 wavetable; #X text 94 42 pitch->; #X text 35 309 Note that I selected "save contents" in the properties #X text 597 217 CLEAR TABLE; #X text 35 395 For efficiency's sake tabosc4~ requires that the table #X text 38 494 If you want a specific sinusoidal composition \, you #X text 36 240 Here \, in place of the "osc~" cosine wave oscillator #X text 36 240 Here \, in place of the "osc~" cosine wave oscillator #X text 36 240 Here \, in place of the "osc~" cosine wave oscillator #X text 199 18 level; #X text 20 132 audio; #X text 96 114 show level; #X text 30 123 oscillator -->; #X text 485 445 updated for Pd version 0.34; #X text 33 8 WAVETABLE OSCILLATORS; #X text 36 106 wavetable; #X text 88 54 pitch->; #X text 13 319 Here's a tabosc4~ controlling the frequency of another #X text 13 319 Here's a tabosc4~ controlling the frequency of another #X text 199 18 level; #X text 20 132 audio; #X text 96 114 show level; #X text 33 8 WAVETABLE OSCILLATORS; #X text 21 81 phase; #X text 20 96 generation -->; #X text 25 117 range; #X text 24 132 adjustment -->; #X text 250 38 squeeze; #X text 133 40 frequency; #X text 223 217 <--click to graph; #X text 25 360 The tabread4~ module is available for situations requiring #X text 30 508 You would use tabread4~ (as opposed to tabosc4~) if #X text 554 624 updated for Pd version 0.37; #X text 554 624 updated for Pd version 0.37; #X text 21 81 phase; #X text 20 96 generation -->; #X text 25 117 range; #X text 24 132 adjustment -->; #X text 223 217 <--click to graph; #X text 36 22 4-POINT INTERPOLATION IN DETAIL; #X text 35 293 (this would be; #X text 36 313 equivalent to the; #X text 110 333 above) -->; #X text 18 409 This patch demonstrates 4-point interpolation in tabread4~. #X text 18 409 This patch demonstrates 4-point interpolation in tabread4~. #X text 199 18 level; #X text 20 132 audio; #X text 96 114 show level; #X text 153 69 frequency; #X text 155 50 modulation; #X text 255 150 modulation; #X text 253 169 depth; #X text 250 212 frequency; #X text 254 194 carrier; #X text 33 8 FREQUENCY MODULATION BY WAVETABLE; #X text 47 356 This tabosc4~ controls the pitch of a sinusoidal oscillator #X text 520 438 updated for Pd version 0.37; #X text 520 438 updated for Pd version 0.37; #X text 520 438 updated for Pd version 0.37; #X text 199 18 level; #X text 20 132 audio; #X text 96 114 show level; #X text 581 481 updated for Pd version 0.34; #X text 33 8 SWITCHING BETWEEN TABLES; #X text 20 51 During a performance you're unlikely to want to draw #X text 41 362 There's also a "text object" hook so that you can have #X text 31 431 You would use this if you want to include one or more #X text 31 431 You would use this if you want to include one or more #X text 31 431 You would use this if you want to include one or more #X text 102 13 SCRATCH MACHINE; #X text 72 48 <-- read point in 100ths of a second; #X text 94 101 convert to SAMPLES (441 samples in 0.01 sec); #X text 246 174 read from the table; #X text 237 192 (the input is the index in samples); #X text 16 482 For more on reading and writing soundfiles to tables #X text 14 355 This patch introduces the "tabread4~" object \, which #X text 17 539 Fanatics take note: if you want really high-fidelity #X text 591 173 (one second plus three extra; #X text 593 192 for 4-point interpolation); #X text 385 304 message to read a soundfile into the table (automatically #X text 84 150 convert smoothly to audio signal; #X text 84 62 (range is 0-100.) YOU ONLY HEAR OUTPUT; #X text 85 78 WHEN THIS IS 0-100 AND ACTIVELY CHANGING.; #X text 596 589 updated for Pd version 0.33; #X text 584 151 --- 44103 samples ---; #X text 584 151 --- 44103 samples ---; #X text 49 11 LOOPING SAMPLER; #X text 83 54 <-- frequency (Hz.); #X text 110 248 <-- click to display output; #X text 110 108 <-- chunk size (100ths of a second); #X text 615 423 <-- click here to record your own sample; #X text 678 501 v-- re-read the original sample; #X text 14 540 In this patch you will frequently hear discontinuities #X text 80 159 <-- readjust phase for range 0 - (chunk size); #X text 79 187 <-- add one to avoid beginning of table; #X text 629 153 ---- 44103 samples ----; #X text 643 336 ---- 1 second ------; #X text 742 591 updated for Pd version 0.37; #X text 16 409 This is a looping sampler in which you specify the number #X text 16 409 This is a looping sampler in which you specify the number #X text 16 409 This is a looping sampler in which you specify the number #X text 16 409 This is a looping sampler in which you specify the number #X text 171 86 <-- chunk size (100ths of a second); #X text 40 9 ENVELOPING YOUR LOOPING SAMPLER; #X text 736 148 -- 44103 samples ---; #X text 727 322 ----- 1 second ------; #X text 28 362 Here we apply an amplitude envelope to protect against #X text 188 220 <-- click to graph envelope; #X text 28 476 To see the envelope \, put the phasor on 2 Hz or so #X text 26 545 It is possible to get much more control over the shape #X text 641 430 <-- click here to record to table; #X text 675 499 v-- re-read the original sound; #X text 708 565 updated for Pd version 0.37; #X text 708 565 updated for Pd version 0.37; #X text 708 565 updated for Pd version 0.37; #X text 164 106 <-- chunk size (100ths of a second); #X text 34 474 In this patch we can loop in any "window" of the input #X text 242 281 <-- graph table index; #X text 684 337 ----- 1 second ------; #X text 631 514 v-- re-read the original sample; #X text 678 147 ---- 44103 samples ---; #X text 688 628 updated for Pd version 0.37; #X text 157 206 <-- read point (100ths of a second); #X text 651 422 <-- record; #X text 36 13 ENVELOPING THE LOOPING SAMPLER; #X text 37 574 You should hear some doppler shift as you change the #X text 37 574 You should hear some doppler shift as you change the #X text 37 574 You should hear some doppler shift as you change the #X text 189 107 <-- chunk size (100ths of a second); #X text 630 464 v-- re-read the original sample; #X text 184 217 <-- read point in 100ths of a second; #X text 218 272 <-- graph table index; #X text 643 315 ----- 1 second ------; #X text 631 144 ---- 44103 samples ---; #X text 21 8 SLIDING STABLE LOOPS WITHOUT DOPPLER SHIFT; #X text 631 390 <-- record; #X text 11 518 This example differs from the previous one in having #X text 652 592 updated for Pd version 0.37; #X text 652 592 updated for Pd version 0.37; #X text 652 592 updated for Pd version 0.37; #X text 652 592 updated for Pd version 0.37; #X text 152 331 <-- read point in 100ths of a second; #X text 18 5 CALCULATING LOOP FREQUENCY AS FUNCTION OF TRANSPOSITION #X text 48 51 <-- transposition (10ths of a halftone); #X text 264 287 chunk size; #X text 264 309 in seconds; #X text 80 131 divide speed change by chunk; #X text 78 152 size to get loop frequency; #X text 382 75 The transposition is frequency in Hz. divided by chunk #X text 384 126 Notice now that we get Doppler effects when the chunk #X text 527 449 <-- record; #X text 560 513 v-- re-read original table; #X text 682 572 updated for Pd version 0.37; #X text 647 425 --- 44103 samples ---; #X text 199 75 speed change; #X text 387 208 You might also want to have a way to retrigger the #X text 387 208 You might also want to have a way to retrigger the #X text 387 208 You might also want to have a way to retrigger the #X text 387 208 You might also want to have a way to retrigger the #X text 60 137 <-- read point in 100ths of a second; #X text 189 58 chunk size; #X text 189 80 in seconds; #X text 486 684 updated for Pd version 0.37; #X text 607 81 speed change; #X text 18 5 TWO OVERLAPPING SAMPLE READ ELEMENTS; #X text 444 195 --- 44103 samples ---; #X text 101 91 <-- record; #X text 134 155 v-- re-read original table; #X text 211 112 ... and in samples; #X text 453 56 <-- transposition \, halftones/10; #X text 456 159 loop frequency; #X text 566 190 second phase signal; #X text 566 210 out of phase from; #X text 565 231 first one; #X text 70 265 copy 1; #X text 327 274 copy 2; #X text 118 503 Here is the previous patch modified to use two copies #X text 119 584 The computation of "chunk-size-samples" (as a message) #X text 120 654 Finally \, the two copies' outputs are added and the #X text 120 654 Finally \, the two copies' outputs are added and the #X text 121 96 in seconds; #X text 417 698 updated for Pd version 0.37; #X text 444 195 --- 44103 samples ---; #X text 101 91 <-- record; #X text 134 155 v-- re-read original table; #X text 391 43 <-- transposition \, halftones/10; #X text 37 123 <-- precession \, percent; #X text 158 3 TIME COMPRESSION/EXPANSION BY LOOPED SAMPLING; #X text 111 529 Here \, rather than ask you to push the read pointer #X text 111 626 We've changed the control for "chunk size" to milliseconds #X text 48 47 <-- chunk size (msec); #X text 182 188 <-- loop length; #X text 223 203 (msec); #X text 223 203 (msec); #X text 223 203 (msec); #X text 28 36 Pd is usually compiled to work on 32-bit audio samples. #X text 29 196 You can use the "onset" inlet to tabread4~ to get good #X text 116 13 USING ONSETS INTO TABREAD4~ TO IMPROVE ACCURACY; #X text 28 310 At left below an onset (1 or 150000 samples) is added #X text 57 647 BAD; #X text 190 646 GOOD; #X text 193 425 ONSET INTO TABLE; #X text 384 426 This loads the table:; #X text 384 426 This loads the table:; #X text 384 426 This loads the table:; #X text 384 426 This loads the table:; #X text 488 61 and will take about 20 seconds to fill.; #X text 488 45 *** The table is now 1 million points \,; #X text 61 328 playback speed \, samples/sec; #X text 89 460 naive way: just; #X text 89 475 run a phasor; #X text 88 491 into tabread4~; #X text 454 680 new onset is phase plus old onset; #X text 458 626 extrapolated phase of next sample; #X text 409 700 new onset minus old onset; #X text 389 726 back up phasor output by amount the onset advanced #X text 387 739 (approximately zero but not exactly because of; #X text 389 753 truncation error!); #X text 400 357 convert to samples; #X text 385 384 set both last-onset and previous-onset; #X text 385 407 ... and also reset phasor.; #X text 354 791 convert phase back to range 0-1; #X text 215 548 convert phase to; #X text 215 562 range +/-5000; #X text 40 410 cycles/sec; #X text 30 400 convert to; #X text 216 412 cycles/sec; #X text 206 402 convert to; #X text 469 472 in order to change onset to reflect it; #X text 469 456 Each 100 msec \, poll phase of phasor~; #X text 24 29 Here is how to use the tabread~ "onset" input to allow #X text 22 143 The tricky bits are \, first \, that we need to poll #X text 24 287 The metronome rate is arbitrary but should be fast enough #X text 518 539 extrapolate snapshot of phase by one; #X text 517 552 sample to sync with next block; #X text 41 617 BAD; #X text 160 770 GOOD; #X text 195 9 VARIABLE SPEED PLAYBACK FROM LONG TABLES; #X text 369 328 <- reset phase. 0.5 causes trouble for the "bad" way. #X text 369 328 <- reset phase. 0.5 causes trouble for the "bad" way. #X text 369 328 <- reset phase. 0.5 causes trouble for the "bad" way. #X text 222 276 sine; #X text 252 297 complex; #X text 284 314 rectangle; #X text 313 332 clear; #X text 56 2 THE NYQUIST THEOREM AND FOLDOVER; #X text 30 33 WARNING: PLAY THIS QUIETLY TO AVOID UNPLEASANTNESS AND #X text 29 77 Foldover occurs when you synthesize frequencies greater #X text 330 616 updated for Pd version 0.37; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 219 245 waveforms:; #X text 56 2 FOLDOVER IN SAWTOOTH WAVES; #X text 7 6 This sets the pitch initially to 61 when the patch is first #X text 190 130 <--pitch; #X text 237 205 <--sawtooth amplitude; #X text 233 373 <--pulse train amplitude; #X text 28 406 We'll explain more about making pulses later on... this #X text 19 23 In more ordinary kinds of waveforms \, foldover comes #X text 19 23 In more ordinary kinds of waveforms \, foldover comes #X text 19 23 In more ordinary kinds of waveforms \, foldover comes